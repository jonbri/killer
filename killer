#!/usr/bin/perl -w

use strict;

use Getopt::Long;

sub help() {
    print STDERR <<'HELP';
killer - Quickly kill node processes

Args:
  help - see this message
  /pattern/ - match `ps aux`

Options:
  --report   - just show matches
  --yes_once - auto-confirm yes for first match
  --yes_all  - auto-confirm yes for all matches
  --quiet    - don't write to stdout

USAGE:
  >> killer help           # see help
  >> killer node           # kill all node instances
  >> killer "jonbri.*node" # kill all node instances by user
  >> killer node --report  # see all matches
  >> killer node --yes_all # kill all node instances, skip confirmation

https://github.com/jonbri/killer

HELP
}

my $a_quiet;

sub runCommand($) {
    my ($command) = @_;
    open CMD, "$command |" || die "Unable to run $command: $!";
    my @output = <CMD>;
    close CMD;
    return @output;
}

sub getFirstNonOptionArg {
    my $arg = shift @ARGV;
    if (!defined $arg) {
        return;
    }
    return ($arg =~ /^-/) ? getFirstNonOptionArg() : $arg;
}

sub confirm($) {
    my ($message)=@_;
    print $message;
    my $ok=<>;
    chomp $ok;
    return $ok;
}

sub _print($) {
    my ($s)=@_;
    if (!defined $a_quiet) {
        print $s;
    }
}

MAIN: {
    my $a_yes_once;
    my $a_yes_all;
    my $a_report;
    my $a_help;
    GetOptions(
        'yes_once' => \$a_yes_once,
        'yes_all' => \$a_yes_all,
        'report' => \$a_report,
        'quiet' => \$a_quiet,
        'help' => \$a_help
    ) || (help() && exit 1);

    # show help if given as arg or option
    my $firstArg=getFirstNonOptionArg();
    if (!$firstArg) {
        help();
        exit 1;
    }
    if ($firstArg) {
        if ($firstArg eq "help" || $firstArg =~ /-(-)?h(elp)?/) {
            help();
            exit 0;
        }
    }

    if (defined $a_help) {
        help();
        exit 0;
    }

    my $i_total = 1;
    my $i_kills = 0;
    my $i_skips = 0;

    my @pidLineToKill = runCommand("ps aux");
    @pidLineToKill = grep(/$firstArg/, @pidLineToKill);
    @pidLineToKill = grep(!/perl.*killer /, @pidLineToKill);

    if (scalar @pidLineToKill == 0) {
        _print "no matches found\n";
        exit 0;
    } elsif (scalar @pidLineToKill == 1) {
        _print scalar @pidLineToKill." match found\n";
    } else {
        _print scalar @pidLineToKill." matches found\n";
    }

    foreach (@pidLineToKill) {
        chomp;

        if (scalar @pidLineToKill > 1) {
            _print "$i_total) ";
        }

        if (defined $a_report) {
            _print "$_\n";
        } else {
            my $answer = 'n';
            if (defined $a_yes_all) {
                $answer = 'y';
            } elsif (defined $a_yes_once) {
                if ($i_total == 1) {
                    $answer = 'y';
                } else {
                    $answer = 'n';
                }
            } else {
                $answer = confirm "$_\nkill? (y/n) ";
            }

            if ($answer =~ /^y/i) {
                my @pidParts = split(/\s+/, $_);
                my $pidToKill = $pidParts[1];
                runCommand("sudo kill -9 $pidToKill");
                _print "killed pid $pidToKill\n";
                $i_kills++;
            } else {
                _print "skipped\n";
                $i_skips++;
            }
        }

        $i_total++;
    }

    if (!defined $a_report) {
        _print "$i_kills processes killed\n";
        if ($i_skips > 0) {
            _print "$i_skips processes skipped\n";
        }
    }
}
