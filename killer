#!/usr/bin/perl -w

use strict;

sub help() {
    print STDERR <<'HELP';
killer - Quickly kill node processes

Args:
  help - see this message
  /pattern/ - see this message

USAGE:
  >> killer help           # see help
  >> killer node           # kill all node instances
  >> killer "jonbri.*node" # kill all node instances by user

https://github.com/jonbri/killer

HELP
}

sub runCommand($) {
    my ($command) = @_;
    open CMD, "$command |" || die "Unable to run $command: $!";
    my @output = <CMD>;
    close CMD;
    return @output;
}

# give user a chance to back out before an operation
sub confirm($) {
    my ($message)=@_;
    print $message;
    print "\nkill? (y/n/ctrl-c to cancel) ";
    print ">> ";
    my $ok=<>;
    chomp $ok;
    return $ok;
}

MAIN: {
    my $firstArg=shift @ARGV;

    if (!$firstArg) {
        help();
        exit 1;
    }

    if ($firstArg) {
        if ($firstArg eq "help" || $firstArg =~ /-(-)?h(elp)?/) {
            help();
        }
    }

    my $i_total = 1;
    my $i_kills = 0;
    my $i_skips = 0;

    my @pidLineToKill = runCommand("ps aux | grep '$firstArg ' | grep -v 'grep'");

    if (scalar @pidLineToKill == 1) {
        print scalar @pidLineToKill." match found\n";
    } else {
        print scalar @pidLineToKill." matches found\n";
    }

    foreach (@pidLineToKill) {
        chomp;

        print "$i_total) ";
        if (confirm "$_" eq "y") {
            my @pidParts = split(/\s+/, $_);
            my $pidToKill = $pidParts[1];
            runCommand("sudo ls");
            print "killed pid $pidToKill\n";
            $i_kills++;
        } else {
            print "skipped\n";
            $i_skips++;
        }

        $i_total++;
    }

    print "$i_kills processes killed\n";
    if ($i_skips > 0) {
        print "$i_skips processes skipped\n";
    }
}
